name: Build MaisonGPT Desktop (macOS & Windows)

on:
  workflow_dispatch:
    inputs:
      url:
        description: "Target URL to package"
        required: true
        default: "https://chat.maisonrmi.com"
      name:
        description: "Application name"
        required: true
        default: "MaisonGPT"
      icon:
        description: "Custom app icon (URL or repo path)"
        required: false
        default: "assets/icons/logo-1024-white.png"
      width:
        description: "Window width"
        required: false
        default: "1200"
      height:
        description: "Window height"
        required: false
        default: "780"
  push:
    tags:
      - 'v*'
      - 'v*.*.*'

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            rust: stable
          - os: windows-latest
            rust: stable
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          check-latest: true

      - name: Install pake-cli locally
        run: npm install pake-cli@latest

      - name: Pin Tauri versions to 2.9.0
        shell: bash
        run: |
          set -euo pipefail
          node -e '\
          const fs=require("fs"), path=require("path");\
          function walk(dir){\
            const out=[];\
            for(const e of fs.readdirSync(dir,{withFileTypes:true})){\
              const p=path.join(dir,e.name);\
              if(e.isDirectory()) out.push(...walk(p)); else out.push(p);\
            }\
            return out;\
          }\
          const files=walk("node_modules/pake-cli");\
          for(const f of files){\
            if(f.endsWith("package.json")){\
              try{\
                const j=JSON.parse(fs.readFileSync(f,"utf8"));\
                let changed=false;\
                if(j.dependencies && j.dependencies["@tauri-apps/api"]){ j.dependencies["@tauri-apps/api"]="2.9.0"; changed=true; }\
                if(j.devDependencies && j.devDependencies["@tauri-apps/api"]){ j.devDependencies["@tauri-apps/api"]="2.9.0"; changed=true; }\
                if(changed){ fs.writeFileSync(f, JSON.stringify(j,null,2)); console.log("patched", f); }\
              }catch(e){}\
            }\
            if(path.basename(f)==="Cargo.toml"){\
              try{\
                let s=fs.readFileSync(f,"utf8");\
                s=s.replace(/(^\\s*tauri\\s*=\\s*\"[^\"]+\")/m, "tauri = \\\"2.9.0\\\" ");\
                s=s.replace(/version\\s*=\\s*\"[^\"]+\"/g, "version = \\\"2.9.0\\\" ");\
                fs.writeFileSync(f,s); console.log("patched", f);\
              }catch(e){}\
            }\
          }'
          # Ensure tauri CLI is available at 2.9.0
          npm install @tauri-apps/cli@2.9.0

      - name: Verify Tauri versions (2.9.x)
        shell: bash
        run: |
          set -euo pipefail
          TAURI_CRATE_VER=$(grep -Rhs --include='Cargo.toml' -E '(^\\s*tauri\\s*=\\s*\"|version\\s*=\\s*\")' node_modules/pake-cli | sed -n 's/.*\"\([0-9]\\+\.[0-9]\\+\.[0-9]\\+\)\".*/\1/p' | head -n1 || true)
          NPM_API_VER=$(grep -Rhs --include='package.json' '\"@tauri-apps\\/api\"' node_modules/pake-cli | sed -n 's/.*\"@tauri-apps\\/api\"\\s*:\\s*\"\([0-9][^\" ]*\)\".*/\1/p' | head -n1 || true)
          echo "Detected tauri crate: ${TAURI_CRATE_VER:-unknown}"
          echo "Detected @tauri-apps/api: ${NPM_API_VER:-unknown}"
          if [ -n "$TAURI_CRATE_VER" ] && [ -n "$NPM_API_VER" ]; then
            if [ "${TAURI_CRATE_VER%.*}" != "2.9" ] || [ "${NPM_API_VER%.*}" != "2.9" ]; then
              echo "Expected Tauri 2.9.x; got crate $TAURI_CRATE_VER, npm $NPM_API_VER"
              exit 1
            fi
          fi

      - name: Initialize variables
        shell: bash
        env:
          INPUT_URL: ${{ inputs.url }}
          INPUT_NAME: ${{ inputs.name }}
          INPUT_ICON: ${{ inputs.icon }}
          INPUT_WIDTH: ${{ inputs.width }}
          INPUT_HEIGHT: ${{ inputs.height }}
        run: |
          set -euo pipefail
          echo "URL=${INPUT_URL:-https://chat.maisonrmi.com}" >> "$GITHUB_ENV"
          echo "NAME=${INPUT_NAME:-MaisonGPT}" >> "$GITHUB_ENV"
          echo "ICON=${INPUT_ICON:-assets/icons/logo-1024-white.png}" >> "$GITHUB_ENV"
          echo "WIDTH=${INPUT_WIDTH:-1200}" >> "$GITHUB_ENV"
          echo "HEIGHT=${INPUT_HEIGHT:-780}" >> "$GITHUB_ENV"

      - name: Build app with pake-cli
        shell: bash
        run: |
          set -euo pipefail
          npx pake "$URL" --name "$NAME" --icon "$ICON" --width "$WIDTH" --height "$HEIGHT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME }}-${{ matrix.os }}
          path: node_modules/pake-cli/output/*
          retention-days: 7