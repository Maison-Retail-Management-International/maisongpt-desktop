name: "Build MaisonGPT Desktop (macOS & Windows)"

on:
  # Trigger on version tag push (e.g., v1, v1.0 or v1.2.3)
  push:
    tags:
      - 'v*'         # matches tags like v1, v2.0, v10.15.3 [oai_citation:4‡github.com](https://github.com/actions/create-release#:~:text=push%3A%20,i.e.%20v1.0%2C%20v20.15.10)
      - 'v*.*.*'     # matches semantic version tags like v1.2.3
  # Manual trigger with inputs
  workflow_dispatch:
    inputs:
      url:
        description: "Web app URL to package"
        required: true
        default: "https://chat.maisonrmi.com"
      name:
        description: "Application name"
        required: true
        default: "MaisonGPT"
      icon:
        description: "Path to app icon (PNG format)"
        required: false
        default: "assets/icons/logo-1024-white.png"

jobs:
  # Job to create a release (only runs on tag pushes)
  release:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}           # use the tag name for release [oai_citation:5‡github.com](https://github.com/actions/create-release#:~:text=with%3A%20tag_name%3A%20%24,body%3A)
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
    outputs:
      # Expose the upload URL for use in other jobs
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  # Job to build app on both macOS and Windows
  build:
    needs: release   # ensure release job (if run) completes first
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]  # Matrix includes macOS and Windows runners [oai_citation:6‡github.com](https://github.com/actions/create-release#:~:text=push%3A%20,i.e.%20v1.0%2C%20v20.15.10)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust (stable)
        uses: actions/setup-rust@v1
        with:
          rust-version: stable              # Install stable toolchain on runner

      - name: Install Pake CLI
        run: npm install -g pake-cli        # Install Pake CLI globally [oai_citation:7‡gitee.com](https://gitee.com/grdnet/Pake#:~:text=with%20npm%20npm%20install%20,line%2C%20you%20can%20compile%20packages)

      - name: Build desktop app with Pake
        # Use input values or defaults; ensure title bar is shown by not using --hide-title-bar
        run: |
          pake "${{ github.event.inputs.url || 'https://chat.maisonrmi.com' }}" \
               --name "${{ github.event.inputs.name || 'MaisonGPT' }}" \
               --icon "${{ github.event.inputs.icon || 'assets/icons/logo-1024-white.png' }}"
        # The expressions above use '||' to fall back to default if input is empty [oai_citation:8‡dev.to](https://dev.to/mrmike/github-action-handling-input-default-value-5f2g#:~:text=runs,%27Octocat%27)

      - name: Find output package
        id: find_artifact
        shell: bash
        run: |
          # Search for .dmg (Mac) or .msi (Windows) in the bundle output directory
          artifact_path=$(find . -type f \( -name "*.dmg" -o -name "*_x64.msi" \) -maxdepth 5)
          echo "path=$artifact_path" >> $GITHUB_OUTPUT

      - name: Upload to GitHub Release (tag push)
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifact.outputs.path }}
          # Name the asset based on app name and OS (e.g., MaisonGPT.dmg or MaisonGPT_x64.msi)
          asset_name: ${{ github.event.inputs.name || 'MaisonGPT' }}${{ matrix.os == 'windows-latest' && '_x64.msi' || '.dmg' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/octet-stream' || 'application/x-apple-diskimage' }}
          # ^ use 'application/x-apple-diskimage' for .dmg and 'application/octet-stream' for .msi

      - name: Upload artifact (manual run)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v3
        with:
          name: "MaisonGPT-Desktop-${{ matrix.os }}"   # e.g., MaisonGPT-Desktop-macos-latest
          path: ${{ steps.find_artifact.outputs.path }}